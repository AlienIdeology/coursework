#+TITLE: Lab06 Tests
#+TESTY: PREFIX="lab06"
#+TESTY: REPORT_FRACTION=1
#+TESTY: TIMEOUT=10s

* QUIZ: QUESTIONS.txt
This test determines if the answers in QUESTIONS.txt are correct. This
file must be edited so that the correct ( ) choices are replaced with
(X) AND no other changes are made to the file. If you are confident in
your answers but think you may have made inadvertent changes to
QUESTIONS.txt, you can try restoring it with the provided
QUESTIONS.txt.bk file.

The correct output for the test should be
>> ./test_quiz_filter QUESTIONS.txt | sha256sum -C QUESTION.sha256
-: OK

Note: the sha256sum program is used to verify and must be installed to work.

#+TESTY: use_valgrind=0

#+BEGIN_SRC sh
>> ./test_quiz_filter QUESTIONS.txt | sha256sum -c QUESTIONS.sha256
-: OK
#+END_SRC


* CODE wc_signal
Tests wc_signal to see if it shuts down "gracefully" on receiving
SIGINT.  Assumes that only 1 wc_signal program is running at a time as
~pkill~ is used. Most signal tests run as follows:
- Start background process to ~pkill wc_signal~ 0.5 seconds later
- Start foreground process for ~wc_signal~ to start counting
Utilizes pipes with sleep delays to generate a predictable number of
input lines over time.


#+TESTY: use_valgrind=0
#+BEGIN_SRC sh
>> seq 10 | ./wc_signal

10 lines, 10 words, 21 chars
>> (echo hello; sleep 0.5; echo goodbye) | ./wc_signal

2 lines, 2 words, 14 chars
>> sleep 0.5 && pkill -SIGINT wc_signal &
>> (sleep 1; echo goodbye) | ./wc_signal

0 lines, 1 words, 1 chars
>> sleep 0.5 && pkill -SIGINT wc_signal &
>> (echo hello; sleep 2; echo goodbye) | ./wc_signal

1 lines, 2 words, 7 chars
>> sleep 0.5 && pkill -SIGINT wc_signal &
>> (while true; do echo Line; sleep 0.25; done) | ./wc_signal

3 lines, 4 words, 16 chars
>> sleep 0.5 && pkill -SIGINT wc_signal &
>> (while true; do echo Line; sleep 0.06; done) | ./wc_signal

9 lines, 10 words, 46 chars
#+END_SRC
